{"version":3,"file":"content.bundle.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1GA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;AC9LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AENA;AACA;AACA;AACA","sources":["webpack://extention/./components/chatContainer.js","webpack://extention/./components/container2.js","webpack://extention/./components/learningModeToggle.js","webpack://extention/./components/waitForElement.js","webpack://extention/./js/content.js","webpack://extention/webpack/bootstrap","webpack://extention/webpack/runtime/define property getters","webpack://extention/webpack/runtime/hasOwnProperty shorthand","webpack://extention/webpack/runtime/make namespace object","webpack://extention/webpack/before-startup","webpack://extention/webpack/startup","webpack://extention/webpack/after-startup"],"sourcesContent":["import { askAIQuestion } from '../js/content.js';\n\nexport function createChatContainer(parentElement) {\n    const chatContainer = document.createElement('div');\n    chatContainer.id = 'custom-chat-container';\n\n    // Header\n    const header = document.createElement('div');\n    header.className = 'header';\n\n    // Toggle Button\n    const toggleButton = document.createElement('button');\n    toggleButton.className = 'toggle-button';\n    toggleButton.innerHTML = '☰';\n    toggleButton.title = 'Toggle Visibility';\n\n    header.appendChild(toggleButton);\n\n    const headerTitle = document.createElement('span');\n    headerTitle.innerText = 'Chat-Bot';\n    header.appendChild(headerTitle);\n\n    // Chat Area\n    const chatArea = document.createElement('div');\n    chatArea.id = 'chat-area';\n\n    // Input Area\n    const inputArea = document.createElement('div');\n    inputArea.className = 'input-area';\n\n    const inputField = document.createElement('input');\n    inputField.type = 'text';\n    inputField.id = 'chat-input';\n    inputField.placeholder = 'Write a message...';\n\n    const sendButton = document.createElement('button');\n    sendButton.className = 'send-button';\n    sendButton.innerHTML = '➤';\n\n    // Append input field and button to input area\n    inputArea.appendChild(inputField);\n    inputArea.appendChild(sendButton);\n\n    // Append all elements\n    chatContainer.appendChild(header);\n    chatContainer.appendChild(chatArea);\n    chatContainer.appendChild(inputArea);\n\n    parentElement.appendChild(chatContainer);\n\n    // Toggle visibility of chatArea and inputArea\n    toggleButton.addEventListener('click', () => {\n        const isVisible = chatArea.style.display !== 'none';\n        chatArea.style.display = isVisible ? 'none' : 'flex';\n        inputArea.style.display = isVisible ? 'none' : 'flex';\n        chatContainer.style.height = isVisible ? '50px' : '600px';\n    });\n\n    // Event listener for send button\n    sendButton.addEventListener('click', () => {\n        const userQuestion = inputField.value;\n        if (userQuestion) {\n            addUserBubble(userQuestion);\n            inputField.value = '';\n            const videoUrl = window.location.href;\n            askAIQuestion(videoUrl, userQuestion);\n        }\n    });\n\n    document.addEventListener('fullscreenchange', () => {\n        const chatContainer = document.getElementById('custom-chat-container');\n        const isFullscreen = !!document.fullscreenElement;\n        const secondaryInner = document.getElementById('secondary-inner');\n\n        if (chatContainer) {\n            if (isFullscreen) {\n                document.body.appendChild(chatContainer);\n                chatContainer.classList.add('fullscreen');\n                chatContainer.style.position = 'fixed'; \n            } else {\n                if (secondaryInner) {\n                    secondaryInner.appendChild(chatContainer);\n                    chatContainer.classList.remove('fullscreen');\n                    chatContainer.style.position = 'relative';\n                }\n            }\n        }\n    });\n}\n\nexport function addUserBubble(content) {\n    const chatArea = document.getElementById('chat-area');\n    const userBubble = document.createElement('div');\n    userBubble.className = 'chat-bubble user-bubble';\n    userBubble.innerText = content;\n    chatArea.appendChild(userBubble);\n    chatArea.scrollTop = chatArea.scrollHeight;\n}\n\nexport function addAIBubble(content) {\n    const chatArea = document.getElementById('chat-area');\n    const aiBubble = document.createElement('div');\n    aiBubble.className = 'chat-bubble ai-bubble';\n    aiBubble.innerText = content;\n    chatArea.appendChild(aiBubble);\n    chatArea.scrollTop = chatArea.scrollHeight;\n}","export function createContainer2(parentElement) {\n    const featuresPanel = document.createElement('div');\n    featuresPanel.id = 'features-panel';\n\n    // Header\n    const header = document.createElement('div');\n    header.className = 'features-header';\n\n    const headerTitle = document.createElement('span');\n    headerTitle.innerText = 'Use Unique Features';\n\n    // Dropdown button\n    const dropdownButton = document.createElement('button');\n    dropdownButton.className = 'dropdown-button';\n    dropdownButton.innerHTML = '▼'; // Downward arrow\n    dropdownButton.title = 'Toggle Options';\n\n    header.appendChild(headerTitle);\n    header.appendChild(dropdownButton);\n\n    // Options list\n    const optionsList = document.createElement('ul');\n    optionsList.className = 'features-options';\n    optionsList.style.display = 'none'; // Initially hidden\n\n    const options = ['Fact Check', 'Generate Quiz*', 'Short Summary*', 'Long Summary', 'Get Resources'];\n    options.forEach((option, index) => {\n        const optionItem = document.createElement('li');\n        optionItem.className = 'feature-option';\n        optionItem.innerText = option;\n        optionItem.dataset.index = index; // Assign index to each option\n        optionsList.appendChild(optionItem);\n    });\n\n    // Append header and options list to the panel\n    featuresPanel.appendChild(header);\n    featuresPanel.appendChild(optionsList);\n\n    // Content holders\n    const contentWrapper = document.createElement('div');\n    contentWrapper.id = 'content-wrapper';\n\n    const summaryHolder = document.createElement('div');\n    summaryHolder.id = 'summary-holder';\n    summaryHolder.className = 'feature-content';\n    summaryHolder.innerText = 'Summary Holder';\n    summaryHolder.style.display = 'none';\n\n    const quizHolder = document.createElement('div');\n    quizHolder.id = 'quiz-holder';\n    quizHolder.className = 'feature-content';\n    quizHolder.innerText = 'Quiz Holder';\n    quizHolder.style.display = 'none';\n\n    contentWrapper.appendChild(summaryHolder);\n    contentWrapper.appendChild(quizHolder);\n\n    featuresPanel.appendChild(contentWrapper);\n\n    // Append panel to parent element\n    parentElement.appendChild(featuresPanel);\n\n    // Toggle options visibility on button click\n    dropdownButton.addEventListener('click', () => {\n        const isVisible = optionsList.style.display !== 'none';\n        optionsList.style.display = isVisible ? 'none' : 'block';\n    });\n\n    // Show/hide content on option click\n    optionsList.addEventListener('click', (e) => {\n        if (e.target && e.target.className.includes('feature-option')) {\n            const selectedOption = e.target.dataset.index;\n\n            // Hide all content\n            summaryHolder.style.display = 'none';\n            quizHolder.style.display = 'none';\n\n            // Show relevant content\n            if (selectedOption === '1') { // 'Generate Quiz*'\n                quizHolder.style.display = 'block';\n            } else if (selectedOption === '2') { // 'Short Summary*'\n                summaryHolder.style.display = 'block';\n            }\n        }\n        optionsList.style.display = 'none'; // Close dropdown after selection\n    });\n}\n","export function learningModeToggle(toggleLearningMode) {\n    const switchButton = document.createElement('button');\n    switchButton.className = 'ytp-button learning-mode-switch';\n    switchButton.setAttribute('aria-checked', 'false');\n    switchButton.setAttribute('aria-label', 'Learning Mode');\n    switchButton.setAttribute('title', 'Learning Mode');\n\n    const switchContainer = document.createElement('div');\n    switchContainer.className = 'learning-mode-switch-container';\n\n    const toggleCircle = document.createElement('div');\n    toggleCircle.className = 'learning-mode-switch-circle';\n\n    switchContainer.appendChild(toggleCircle);\n    switchButton.appendChild(switchContainer);\n\n    switchButton.addEventListener('click', toggleLearningMode);\n\n    return switchButton;\n}\n","export function waitForElement(selector, callback) {\n    const interval = setInterval(() => {\n        const element = document.querySelector(selector);\n        if (element) {\n            clearInterval(interval);\n            callback(element);\n        }\n    }, 100);\n}\n","import { waitForElement } from '../components/waitForElement.js';\nimport { learningModeToggle } from '../components/learningModeToggle.js';\nimport { createChatContainer, addAIBubble} from '../components/chatContainer.js';\nimport { createContainer2 } from '../components/container2.js';\n\nfunction addButtonToPlayerControls(playerControls) {\n    const toggleButton = learningModeToggle(toggleLearningMode);\n    playerControls.appendChild(toggleButton);\n}\n\nwaitForElement('.ytp-right-controls', addButtonToPlayerControls);\n\nfunction toggleLearningMode() {\n    const switchButton = document.querySelector('.learning-mode-switch');\n    const toggleCircle = document.querySelector('.learning-mode-switch-circle');\n    const isOn = switchButton.getAttribute('aria-checked') === 'true';\n\n    if (!isOn) {\n        switchButton.setAttribute('aria-checked', 'true');\n        switchButton.querySelector('.learning-mode-switch-container').style.backgroundColor = '#ECB0B0';\n        toggleCircle.style.left = '19px';\n        activateLearningMode();\n    } else {\n        switchButton.setAttribute('aria-checked', 'false');\n        switchButton.querySelector('.learning-mode-switch-container').style.backgroundColor = '#ccc';\n        toggleCircle.style.left = '1px';\n        deactivateLearningMode();\n    }\n}\n\nfunction activateLearningMode() {\n    const sidebar = document.getElementById('related');\n    const secondaryInner = document.getElementById('secondary-inner');\n    let chatContainer = document.getElementById('custom-chat-container');\n    const isFullscreen = !!document.fullscreenElement;\n\n    const videoUrl = window.location.href;\n    if (sidebar && secondaryInner) {\n        sidebar.style.display = 'none';\n        \n        sendVideoInfoToBackend(videoUrl);\n\n        if (isFullscreen) {\n            if (!chatContainer) {\n                createChatContainer(document.body);\n                chatContainer = document.getElementById('custom-chat-container');\n                chatContainer.classList.add('fullscreen');\n            }\n        } else {\n            if (!chatContainer) {\n                createChatContainer(secondaryInner, sidebar.offsetWidth, sidebar.offsetHeight);\n            }\n            createContainer2(secondaryInner);\n        }\n    }\n\n    fetch('http://localhost:8080/api/quiz', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ video_id: extractVideoID(videoUrl) })\n    })\n    .then(response => response.json())\n    .then(data => {\n        const quizData = data.questions; // Array of questions with timestamps\n        const videoElement = document.querySelector('video');\n        const displayedTimestamps = new Set();\n\n        if (videoElement) {\n            setInterval(() => {\n                const currentTime = Math.floor(videoElement.currentTime);\n\n                quizData.forEach(question => {\n                    const questionTime = Math.floor(parseTimestamp(question.timestamp));\n\n                    if (currentTime === questionTime && !displayedTimestamps.has(questionTime)) {\n                        videoElement.pause();\n                        displayQuestionInQuizHolder(question);\n                        displayedTimestamps.add(questionTime);\n                    }\n                });\n            }, 500);\n        }\n    })\n    .catch(error => console.error('Error fetching quiz data:', error));\n}\n\nfunction parseTimestamp(timestamp) {\n    const parts = timestamp.split(':');\n    return parts.length === 2\n        ? parseInt(parts[0], 10) * 60 + parseFloat(parts[1])\n        : parseFloat(parts[0]);\n}\n\nfunction displayQuestionInQuizHolder(question) {\n    const quizHolder = document.getElementById('quiz-holder');\n    if (quizHolder) {\n        quizHolder.innerHTML = `\n            <div>\n                <h3>${question.text}</h3>\n                ${question.options.map((option, idx) =>\n                    `<button class=\"quiz-option\" data-index=\"${idx}\">${option}</button>`\n                ).join('')}\n            </div>\n        `;\n        quizHolder.style.display = 'block';\n    }\n}\n\n\nfunction deactivateLearningMode() {\n    const sidebar = document.getElementById('related');\n    const chatContainer = document.getElementById('custom-chat-container');\n    \n    if (sidebar) {\n        sidebar.style.display = ''; // Show the sidebar\n    }\n    if (chatContainer) {\n        chatContainer.remove(); // Remove the chat container\n    }\n}\n\n\nfunction sendVideoInfoToBackend(videoUrl) {\n    fetch('http://localhost:8080/processVideo', { \n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ videoUrl: videoUrl })\n    })\n    .then(response => response.json())\n    .then(data => {\n        console.log('Success:', data);\n    })\n    .catch((error) => {\n        console.error('Error:', error);\n    });\n}\n\nexport function askAIQuestion(videoUrl, question) {\n    // Make sure videoUrl is properly formatted and extractVideoID is defined correctly\n    const videoId = extractVideoID(videoUrl);\n\n     // Access the video element to grab the current timestamp\n     const videoElement = document.querySelector('video');\n     const currentTimestamp = videoElement ? Math.floor(videoElement.currentTime) : 0; // Default to 0 if video element not found\n\n    // Make a POST request to the backend API\n    fetch('http://localhost:8080/api/question', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            video_id: videoId,  // Updated to match the backend API's expected field name\n            user_question: question,  // Updated to match the backend API's expected field name\n            timestamp: currentTimestamp // Current timestamp of the video\n        })\n    })\n    .then(response => {\n        // Check if the response is OK and JSON\n        if (!response.ok) {\n            throw new Error('Failed to get AI response');\n        }\n        return response.json();  // Parse JSON response\n    })\n    .then(data => {\n        const aiResponse = data.response;  // Extract the AI response from the backend\n        if (aiResponse) {\n            addAIBubble(aiResponse);  // Add the AI response bubble to the UI\n            console.log('AI Response:', aiResponse);\n        } else {\n            console.error('No AI response found in the response data.');\n        }\n    })\n    .catch((error) => {\n        console.error('Error:', error);  // Log any errors for debugging\n    });\n}\n\n\nfunction extractVideoID(videoUrl) {\n    // Define the regex to match YouTube video ID in URLs\n    const videoIDPattern = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/(?:[^\\/\\n\\s]+\\/\\S+\\/|(?:v|e(?:mbed)?)\\/|\\S*?[?&]v=)|youtu\\.be\\/)([a-zA-Z0-9_-]{11})/;\n\n    // Execute the regex pattern to match the video ID\n    const match = videoUrl.match(videoIDPattern);\n\n    // Return the video ID if found, otherwise null\n    return match ? match[1] : null;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./js/content.js\");\n",""],"names":[],"sourceRoot":""}