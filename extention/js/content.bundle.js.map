{"version":3,"file":"content.bundle.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACrHA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;AC/KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AENA;AACA;AACA;AACA","sources":["webpack://extention/./components/chatContainer.js","webpack://extention/./components/container2.js","webpack://extention/./components/learningModeToggle.js","webpack://extention/./components/waitForElement.js","webpack://extention/./js/content.js","webpack://extention/webpack/bootstrap","webpack://extention/webpack/runtime/define property getters","webpack://extention/webpack/runtime/hasOwnProperty shorthand","webpack://extention/webpack/runtime/make namespace object","webpack://extention/webpack/before-startup","webpack://extention/webpack/startup","webpack://extention/webpack/after-startup"],"sourcesContent":["import { askAIQuestion } from '../js/content.js';\r\n\r\nexport function createChatContainer(parentElement) {\r\n    const chatContainer = document.createElement('div');\r\n    chatContainer.id = 'custom-chat-container';\r\n\r\n     // Modal Overlay\r\n     const modalOverlay = document.createElement('div');\r\n     modalOverlay.id = 'chat-modal-overlay';\r\n \r\n     const modalContent = document.createElement('div');\r\n     modalContent.id = 'chat-modal-content';\r\n     modalContent.innerText = 'The video is being processed. Please wait...';\r\n \r\n     modalOverlay.appendChild(modalContent);\r\n     chatContainer.appendChild(modalOverlay);\r\n\r\n    // Header\r\n    const header = document.createElement('div');\r\n    header.className = 'header';\r\n\r\n    // Toggle Button\r\n    const toggleButton = document.createElement('button');\r\n    toggleButton.className = 'toggle-button';\r\n    toggleButton.innerHTML = '☰';\r\n    toggleButton.title = 'Toggle Visibility';\r\n\r\n    header.appendChild(toggleButton);\r\n\r\n    const headerTitle = document.createElement('span');\r\n    headerTitle.innerText = 'Chat-Bot';\r\n    header.appendChild(headerTitle);\r\n\r\n    // Chat Area\r\n    const chatArea = document.createElement('div');\r\n    chatArea.id = 'chat-area';\r\n\r\n    // Input Area\r\n    const inputArea = document.createElement('div');\r\n    inputArea.className = 'input-area';\r\n\r\n    const inputField = document.createElement('input');\r\n    inputField.type = 'text';\r\n    inputField.id = 'chat-input';\r\n    inputField.placeholder = 'Write a message...';\r\n\r\n    const sendButton = document.createElement('button');\r\n    sendButton.className = 'send-button';\r\n    sendButton.innerHTML = '➤';\r\n\r\n    // Append input field and button to input area\r\n    inputArea.appendChild(inputField);\r\n    inputArea.appendChild(sendButton);\r\n\r\n    // Append all elements\r\n    chatContainer.appendChild(header);\r\n    chatContainer.appendChild(chatArea);\r\n    chatContainer.appendChild(inputArea);\r\n\r\n    parentElement.appendChild(chatContainer);\r\n\r\n    // Toggle visibility of chatArea and inputArea\r\n    toggleButton.addEventListener('click', () => {\r\n        const isVisible = chatArea.style.display !== 'none';\r\n        chatArea.style.display = isVisible ? 'none' : 'flex';\r\n        inputArea.style.display = isVisible ? 'none' : 'flex';\r\n        chatContainer.style.height = isVisible ? '50px' : '600px';\r\n    });\r\n\r\n    // Event listener for send button\r\n    sendButton.addEventListener('click', () => {\r\n        const userQuestion = inputField.value;\r\n        if (userQuestion) {\r\n            addUserBubble(userQuestion);\r\n            inputField.value = '';\r\n            const videoUrl = window.location.href;\r\n            askAIQuestion(videoUrl, userQuestion);\r\n        }\r\n    });\r\n\r\n    document.addEventListener('fullscreenchange', () => {\r\n        const chatContainer = document.getElementById('custom-chat-container');\r\n        const isFullscreen = !!document.fullscreenElement;\r\n        const secondaryInner = document.getElementById('secondary-inner');\r\n\r\n        if (chatContainer) {\r\n            if (isFullscreen) {\r\n                document.body.appendChild(chatContainer);\r\n                chatContainer.classList.add('fullscreen');\r\n                chatContainer.style.position = 'fixed'; \r\n            } else {\r\n                if (secondaryInner) {\r\n                    secondaryInner.appendChild(chatContainer);\r\n                    chatContainer.classList.remove('fullscreen');\r\n                    chatContainer.style.position = 'relative';\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport function addUserBubble(content) {\r\n    const chatArea = document.getElementById('chat-area');\r\n    const userBubble = document.createElement('div');\r\n    userBubble.className = 'chat-bubble user-bubble';\r\n    userBubble.innerText = content;\r\n    chatArea.appendChild(userBubble);\r\n    chatArea.scrollTop = chatArea.scrollHeight;\r\n}\r\n\r\nexport function addAIBubble(content) {\r\n    const chatArea = document.getElementById('chat-area');\r\n    const aiBubble = document.createElement('div');\r\n    aiBubble.className = 'chat-bubble ai-bubble';\r\n    aiBubble.innerText = content;\r\n    chatArea.appendChild(aiBubble);\r\n    chatArea.scrollTop = chatArea.scrollHeight;\r\n}","export function createContainer2(parentElement) {\r\n    const featuresPanel = document.createElement('div');\r\n    featuresPanel.id = 'features-panel';\r\n\r\n    // Header\r\n    const header = document.createElement('div');\r\n    header.className = 'features-header';\r\n\r\n    const headerTitle = document.createElement('span');\r\n    headerTitle.innerText = 'Use Unique Features';\r\n\r\n    // Dropdown button\r\n    const dropdownButton = document.createElement('button');\r\n    dropdownButton.className = 'dropdown-button';\r\n    dropdownButton.innerHTML = '▼'; // Downward arrow\r\n    dropdownButton.title = 'Toggle Options';\r\n\r\n    header.appendChild(headerTitle);\r\n    header.appendChild(dropdownButton);\r\n\r\n    // Options list\r\n    const optionsList = document.createElement('ul');\r\n    optionsList.className = 'features-options';\r\n    optionsList.style.display = 'none'; // Initially hidden\r\n\r\n    const options = ['Fact Check', 'Generate Quiz*', 'Short Summary*', 'Long Summary', 'Get Resources'];\r\n    options.forEach((option, index) => {\r\n        const optionItem = document.createElement('li');\r\n        optionItem.className = 'feature-option';\r\n        optionItem.innerText = option;\r\n        optionItem.dataset.index = index; // Assign index to each option\r\n        optionsList.appendChild(optionItem);\r\n    });\r\n\r\n    // Append header and options list to the panel\r\n    featuresPanel.appendChild(header);\r\n    featuresPanel.appendChild(optionsList);\r\n\r\n    // Content holders\r\n    const contentWrapper = document.createElement('div');\r\n    contentWrapper.id = 'content-wrapper';\r\n\r\n    const summaryHolder = document.createElement('div');\r\n    summaryHolder.id = 'summary-holder';\r\n    summaryHolder.className = 'feature-content';\r\n    summaryHolder.innerText = 'Summary Holder';\r\n    summaryHolder.style.display = 'none';\r\n\r\n    const quizHolder = document.createElement('div');\r\n    quizHolder.id = 'quiz-holder';\r\n    quizHolder.className = 'feature-content';\r\n    quizHolder.innerText = 'Quiz Holder';\r\n    quizHolder.style.display = 'none';\r\n\r\n    contentWrapper.appendChild(summaryHolder);\r\n    contentWrapper.appendChild(quizHolder);\r\n\r\n    featuresPanel.appendChild(contentWrapper);\r\n\r\n    // Append panel to parent element\r\n    parentElement.appendChild(featuresPanel);\r\n\r\n    // Toggle options visibility on button click\r\n    dropdownButton.addEventListener('click', () => {\r\n        const isVisible = optionsList.style.display !== 'none';\r\n        optionsList.style.display = isVisible ? 'none' : 'block';\r\n    });\r\n\r\n    // Show/hide content on option click\r\n    optionsList.addEventListener('click', (e) => {\r\n        if (e.target && e.target.className.includes('feature-option')) {\r\n            const selectedOption = e.target.dataset.index;\r\n\r\n            // Hide all content\r\n            summaryHolder.style.display = 'none';\r\n            quizHolder.style.display = 'none';\r\n\r\n            // Show relevant content\r\n            if (selectedOption === '1') { // 'Generate Quiz*'\r\n                quizHolder.style.display = 'block';\r\n            } else if (selectedOption === '2') { // 'Short Summary*'\r\n                summaryHolder.style.display = 'block';\r\n            }\r\n        }\r\n        optionsList.style.display = 'none'; // Close dropdown after selection\r\n    });\r\n}\r\n","export function learningModeToggle(toggleLearningMode) {\r\n    const switchButton = document.createElement('button');\r\n    switchButton.className = 'ytp-button learning-mode-switch';\r\n    switchButton.setAttribute('aria-checked', 'false');\r\n    switchButton.setAttribute('aria-label', 'Learning Mode');\r\n    switchButton.setAttribute('title', 'Learning Mode');\r\n\r\n    const switchContainer = document.createElement('div');\r\n    switchContainer.className = 'learning-mode-switch-container';\r\n\r\n    const toggleCircle = document.createElement('div');\r\n    toggleCircle.className = 'learning-mode-switch-circle';\r\n\r\n    switchContainer.appendChild(toggleCircle);\r\n    switchButton.appendChild(switchContainer);\r\n\r\n    switchButton.addEventListener('click', toggleLearningMode);\r\n\r\n    return switchButton;\r\n}\r\n","export function waitForElement(selector, callback) {\r\n    const interval = setInterval(() => {\r\n        const element = document.querySelector(selector);\r\n        if (element) {\r\n            clearInterval(interval);\r\n            callback(element);\r\n        }\r\n    }, 100);\r\n}\r\n","import { waitForElement } from '../components/waitForElement.js';\r\nimport { learningModeToggle } from '../components/learningModeToggle.js';\r\nimport { createChatContainer, addAIBubble} from '../components/chatContainer.js';\r\nimport { createContainer2 } from '../components/container2.js';\r\n\r\nfunction addButtonToPlayerControls(playerControls) {\r\n    const toggleButton = learningModeToggle(toggleLearningMode);\r\n    playerControls.appendChild(toggleButton);\r\n}\r\n\r\nwaitForElement('.ytp-right-controls', addButtonToPlayerControls);\r\n\r\nfunction toggleLearningMode() {\r\n    const switchButton = document.querySelector('.learning-mode-switch');\r\n    const toggleCircle = document.querySelector('.learning-mode-switch-circle');\r\n    const isOn = switchButton.getAttribute('aria-checked') === 'true';\r\n\r\n    if (!isOn) {\r\n        switchButton.setAttribute('aria-checked', 'true');\r\n        switchButton.querySelector('.learning-mode-switch-container').style.backgroundColor = '#ECB0B0';\r\n        toggleCircle.style.left = '19px';\r\n        activateLearningMode();\r\n        showModal()\r\n\r\n    } else {\r\n        switchButton.setAttribute('aria-checked', 'false');\r\n        switchButton.querySelector('.learning-mode-switch-container').style.backgroundColor = '#ccc';\r\n        toggleCircle.style.left = '1px';\r\n        deactivateLearningMode();\r\n    }\r\n}\r\n\r\nfunction activateLearningMode() {\r\n    const sidebar = document.getElementById('related');\r\n    const secondaryInner = document.getElementById('secondary-inner');\r\n    let chatContainer = document.getElementById('custom-chat-container');\r\n    const isFullscreen = !!document.fullscreenElement;\r\n\r\n    if (sidebar && secondaryInner) {\r\n        sidebar.style.display = 'none'; // Hide the sidebar\r\n\r\n        const videoUrl = window.location.href; // Grab the video URL\r\n        sendVideoInfoToBackend(videoUrl); \r\n        if (isFullscreen) {\r\n            if (!chatContainer) {\r\n                createChatContainer(document.body); // Append to body in full-screen\r\n                chatContainer = document.getElementById('custom-chat-container');\r\n                chatContainer.classList.add('fullscreen');\r\n            }\r\n        } else {\r\n            if (!chatContainer) {\r\n                createChatContainer(secondaryInner, sidebar.offsetWidth, sidebar.offsetHeight);\r\n            }\r\n            createContainer2(secondaryInner);\r\n        }\r\n\r\n        if (sidebar && !isFullscreen) {\r\n            sidebar.style.display = 'none';\r\n        }\r\n    }\r\n}\r\n\r\nfunction deactivateLearningMode() {\r\n    const sidebar = document.getElementById('related');\r\n    const chatContainer = document.getElementById('custom-chat-container');\r\n    \r\n    if (sidebar) {\r\n        sidebar.style.display = ''; // Show the sidebar\r\n    }\r\n    if (chatContainer) {\r\n        chatContainer.remove(); // Remove the chat container\r\n    }  \r\n}\r\n\r\nfunction showModal() {\r\n    const modalOverlay = document.getElementById('chat-modal-overlay');\r\n    if (modalOverlay) {\r\n        modalOverlay.style.display = 'flex'; // Show the modal\r\n        console.log('Modal shown');\r\n    } else {\r\n        console.error('Modal overlay not found');\r\n    }\r\n}\r\n\r\nfunction hideModal() {\r\n    const modalOverlay = document.getElementById('chat-modal-overlay');\r\n    if (modalOverlay) {\r\n        modalOverlay.style.display = 'none'; // Hide the modal\r\n        console.log('Modal hidden');\r\n    } else {\r\n        console.error('Modal overlay not found');\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction sendVideoInfoToBackend(videoUrl) {\r\n    fetch('http://localhost:8080/processVideo', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ videoUrl: videoUrl })\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        const status = data.transcription_status;\r\n        console.log('THIS IS THE DATA:', data)\r\n        if (status === 'pending') {\r\n            showModal();\r\n            addAIBubble('The video is being transcribed. This may take some time, please wait...');\r\n        } else if (status === 'completed') {\r\n            hideModal();\r\n            addAIBubble('Video Proccessed! You can now ask questions.');\r\n        } else if (status === 'failed') {\r\n            addAIBubble('Transcription failed. Please try again later.');\r\n        }\r\n    })\r\n    .catch(error => {\r\n        console.error('Error:', error);\r\n        addAIBubble('An error occurred while processing the video. Please try again later.');\r\n    });\r\n}\r\n\r\n\r\n\r\nexport function askAIQuestion(videoUrl, question) {\r\n    // Make sure videoUrl is properly formatted and extractVideoID is defined correctly\r\n    const videoId = extractVideoID(videoUrl);\r\n\r\n     // Access the video element to grab the current timestamp\r\n     const videoElement = document.querySelector('video');\r\n     const currentTimestamp = videoElement ? Math.floor(videoElement.currentTime) : 0; // Default to 0 if video element not found\r\n\r\n    // Make a POST request to the backend API\r\n    fetch('http://localhost:8080/api/question', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            video_id: videoId,  // Updated to match the backend API's expected field name\r\n            user_question: question,  // Updated to match the backend API's expected field name\r\n            timestamp: currentTimestamp // Current timestamp of the video\r\n        })\r\n    })\r\n    .then(response => {\r\n        // Check if the response is OK and JSON\r\n        if (!response.ok) {\r\n            throw new Error('Failed to get AI response');\r\n        }\r\n        return response.json();  // Parse JSON response\r\n    })\r\n    .then(data => {\r\n        const aiResponse = data.response;  // Extract the AI response from the backend\r\n        if (aiResponse) {\r\n            addAIBubble(aiResponse);  // Add the AI response bubble to the UI\r\n            console.log('AI Response:', aiResponse);\r\n        } else {\r\n            console.error('No AI response found in the response data.');\r\n        }\r\n    })\r\n    .catch((error) => {\r\n        console.error('Error:', error);  // Log any errors for debugging\r\n    });\r\n}\r\n\r\n\r\nfunction extractVideoID(videoUrl) {\r\n    // Define the regex to match YouTube video ID in URLs\r\n    const videoIDPattern = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/(?:[^\\/\\n\\s]+\\/\\S+\\/|(?:v|e(?:mbed)?)\\/|\\S*?[?&]v=)|youtu\\.be\\/)([a-zA-Z0-9_-]{11})/;\r\n\r\n    // Execute the regex pattern to match the video ID\r\n    const match = videoUrl.match(videoIDPattern);\r\n\r\n    // Return the video ID if found, otherwise null\r\n    return match ? match[1] : null;\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./js/content.js\");\n",""],"names":[],"sourceRoot":""}